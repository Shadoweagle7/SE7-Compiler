#ifndef SE7_TOKEN
#define SE7_TOKEN

#include "util.hpp"

#include <string>
#include <string_view>
#include <cstdint>
#include <bitset>

enum class token_type : std::uintmax_t {
	unknown					= -2,
	eof						= -1,
	program					= 0,
	
	__operator				= 0b100000000000000000000000000000000000000000000000000000,
	plus					= 0b100000000000000000000000000000000000000000000000000001,
	minus					= 0b100000000000000000000000000000000000000000000000000010,
	star					= 0b100000000000000000000000000000000000000000000000000100,
	forward_slash			= 0b100000000000000000000000000000000000000000000000001000,
	backward_slash			= 0b100000000000000000000000000000000000000000000000010000,
	percent					= 0b100000000000000000000000000000000000000000000000100000,
	equals					= 0b100000000000000000000000000000000000000000000001000000,
	exclamation_mark		= 0b100000000000000000000000000000000000000000000010000000,
	ampersands				= 0b100000000000000000000000000000000000000000000100000000,
	bar						= 0b100000000000000000000000000000000000000000001000000000,
	tilde					= 0b100000000000000000000000000000000000000000010000000000,
	hat						= 0b100000000000000000000000000000000000000000100000000000,
	double_ampersands		= 0b100000000000000000000000000000000000000001000000000000,
	double_bar				= 0b100000000000000000000000000000000000000010000000000000,
	double_equals			= 0b100000000000000000000000000000000000000100000000000000,
	exclamation_equals		= 0b100000000000000000000000000000000000001000000000000000,
	plus_equals				= 0b100000000000000000000000000000000000010000000000000000,
	minus_equals			= 0b100000000000000000000000000000000000100000000000000000,
	star_equals				= 0b100000000000000000000000000000000001000000000000000000,
	forward_slash_equals	= 0b100000000000000000000000000000000010000000000000000000,
	backward_slash_equals	= 0b100000000000000000000000000000000100000000000000000000,
	percent_equals			= 0b100000000000000000000000000000001000000000000000000000,
	ampersands_equals		= 0b100000000000000000000000000000010000000000000000000000,
	bar_equals				= 0b100000000000000000000000000000100000000000000000000000,
	hat_equals				= 0b100000000000000000000000000001000000000000000000000000,
	double_plus				= 0b100000000000000000000000000010000000000000000000000000,
	double_minus			= 0b100000000000000000000000000100000000000000000000000000,
	double_star				= 0b100000000000000000000000001000000000000000000000000000,
	double_forward_slash	= 0b100000000000000000000000010000000000000000000000000000,
	double_backward_slash	= 0b100000000000000000000000100000000000000000000000000000,
	double_percent			= 0b100000000000000000000001000000000000000000000000000000,
	less					= 0b100000000000000000000010000000000000000000000000000000,
	less_equal				= 0b100000000000000000000100000000000000000000000000000000,
	greater					= 0b100000000000000000001000000000000000000000000000000000,
	greater_equal			= 0b100000000000000000010000000000000000000000000000000000,
	bit_left				= 0b100000000000000000100000000000000000000000000000000000,
	bit_left_equals			= 0b100000000000000001000000000000000000000000000000000000,
	bit_right				= 0b100000000000000010000000000000000000000000000000000000,
	bit_right_equals		= 0b100000000000000100000000000000000000000000000000000000,
	await					= 0b10000000000000100000000000000000000000000000000000,
	thread_launch			= 0b10000000000001000000000000000000000000000000000000,
	sleep					= 0b10000000000010000000000000000000000000000000000000,
	join					= 0b10000000000100000000000000000000000000000000000000,
	detach					= 0b10000000001000000000000000000000000000000000000000,
	wait_for				= 0b10000001000000000000000000000000000000000000000000,
	yield					= 0b10000010000000000000000000000000000000000000000000,
	____asm					= 0b10000100000000000000000000000000000000000000000000,

	dot						= 0b100000000000010000000000000000000000000000000000000000,
	scope					= 0b100000000000100000000000000000000000000000000000000000,

	expression				= 0b010000000000000000000000000000000000000000000000000000,

	control					= 0b010000010000000000000000000000000000000000000000000000,
	control_if				= 0b010000010000000000000000000000000000000000000000000001,
	control_while			= 0b010000010000000000000000000000000000000000000000000010,
	control_for_init_condition_increment
							= 0b010000010000000000000000000000000000000000000000000100,
	control_for_item_in_element
							= 0b010000010000000000000000000000000000000000000000001000,
	control_switch			= 0b010000010000000000000000000000000000000000000000010000,
	control_when			= 0b010000010000000000000000000000000000000000000000100000,

	literal					= 0b011000000000000000000000000000000000000000000000000000,
																					 
	bool_literal			= 0b011000000000000000000000000000000000000000000000000010,
	char_literal			= 0b011000000000000000000000000000000000000000000000000100,
	wide_char_literal		= 0b011000000000000000000000000000000000000000000000001000,
	byte_literal			= 0b011000000000000000000000000000000000000000000000010000,
	int_literal				= 0b011000000000000000000000000000000000000000000000100000,
	octal_literal			= 0b011000000000000000000000000000000000000000000001000000,
	hex_literal				= 0b011000000000000000000000000000000000000000000010000000,
	bin_literal				= 0b011000000000000000000000000000000000000000000100000000,
	string_literal			= 0b011000000000000000000000000000000000000000001000000000,
	wide_string_literal		= 0b011000000000000000000000000000000000000000010000000000,

	__new					= 0b010000000000000000000000000000000000000000000000000001,
	lambda					= 0b010000000000000000000000000000000000000000000000000010,
	identifier				= 0b010000000000000000000000000000000000000000000000000100,

	declaration				= 0b001000000000000000000000000000000000000000000000000000,
	definition				= 0b001000000000000000000000000000000000000000000000000001,

	keyword					= 0b000100000000000000000000000000000000000000000000000000,

	modifier				= 0b000100000000000000000000000000000000000000000000000001,
	const_modifier			= 0b000100000000000000000000000000000000000000000000000011,
	static_modifier			= 0b000100000000000000000000000000000000000000000000000101,
	volatile_modifier		= 0b000100000000000000000000000000000000000000000000001001,
	unsigned_modifier		= 0b000100000000000000000000000000000000000000000000010001,
	mutable_modifier		= 0b000100000000000000000000000000000000000000000000100001,
	abstract_modifier		= 0b000100000000000000000000000000000000000000000001000001,
	final_modifier			= 0b000100000000000000000000000000000000000000000010000001,
	virtual_modifier		= 0b000100000000000000000000000000000000000000000100000001,
	restrict_modifier		= 0b000100000000000000000000000000000000000000001000000001,
	generic_modifier		= 0b000100000000000000000000000000000000000000010000000001,

	__module				= 0b000100000000000000000000000000000000000000000000000010,
	guarantees				= 0b000100000000000000000000000000000000000000000000000100,
	dependencies			= 0b000100000000000000000000000000000000000000000000001000,
	__import				= 0b000100000000000000000000000000000000000000000000010000,
	async					= 0b000100000000000000000000000000000000000000000000100000,
	sync					= 0b000100000000000000000000000000000000000000000001000000,

	type					= 0b000010000000000000000000000000000000000000000000000000,
	primitive				= 0b000110000000000000000000000000000000000000000000000001,
	byte_type				= 0b000110100000000000000000000000000000000000000000000001,
	bool_type				= 0b000110010000000000000000000000000000000000000000000001,
	char_type				= 0b000110001000000000000000000000000000000000000000000001,
	wchar_type				= 0b000110000100000000000000000000000000000000000000000001,
	short_type				= 0b000110000010000000000000000000000000000000000000000001,
	int_type				= 0b000110000001000000000000000000000000000000000000000001,
	long_type				= 0b000110000000100000000000000000000000000000000000000001,

	// Should we keep? Cannot detect in lexer, must be defined in parser
	long_long_type			= 0b000110000000010000000000000000000000000000000000000001,

	float_type				= 0b000110000000001000000000000000000000000000000000000001,
	double_type				= 0b000110000000000100000000000000000000000000000000000001,
	string_type				= 0b000110000000000010000000000000000000000000000000000001,
	wstring_type			= 0b000110000000000001000000000000000000000000000000000001,
	thread_type				= 0b000110000000000000100000000000000000000000000000000001,

	function				= 0b000010000000000000000000000000000000000000000000000010,
	array					= 0b000010000000000000000000000000000000000000000000000100,
	string					= 0b000010000000000000000000000000000000000000000000001000,
	__struct				= 0b000010000000000000000000000000000000000000000000010000,
	__class					= 0b000010000000000000000000000000000000000000000000100000,

	symbol					= 0b000001000000000000000000000000000000000000000000000000,
	open_parenthesis		= 0b000001000000000000000000000000000000000000000000000001,
	closed_parenthesis		= 0b000001000000000000000000000000000000000000000000000010,
	open_square_bracket		= 0b000001000000000000000000000000000000000000000000000100,
	closed_square_bracket	= 0b000001000000000000000000000000000000000000000000001000,
	open_curly_bracket		= 0b000001000000000000000000000000000000000000000000010000,
	closed_curly_bracket	= 0b000001000000000000000000000000000000000000000000100000,

	protection				= 0b000000100000000000000000000000000000000000000000000000,
	protection_public		= 0b000000100000000000000000000000000000000000000000000001,
	protection_private		= 0b000000100000000000000000000000000000000000000000000010,
	protection_protected	= 0b000000100000000000000000000000000000000000000000000100
};

// Tests
//constexpr std::uintmax_t a = static_cast<std::uintmax_t>(token_type::__operator);
//constexpr std::uintmax_t b = static_cast<std::uintmax_t>(token_type::plus);
//constexpr bool c = a & b;
//constexpr bool d = has_bit(
//	static_cast<std::uintmax_t>(token_type::__operator),
//	static_cast<std::uintmax_t>(token_type::plus)
//);

constexpr bool is_operator(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::__operator),
		static_cast<std::uintmax_t>(t)
	);
}

constexpr bool is_expression(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::expression),
		static_cast<std::uintmax_t>(t)
	);
}

constexpr bool is_literal(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::literal),
		static_cast<std::uintmax_t>(t)
	);
}

constexpr bool is_declaration(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::declaration),
		static_cast<std::uintmax_t>(t)
	);
}

constexpr bool is_keyword(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::keyword),
		static_cast<std::uintmax_t>(t)
	);
}

constexpr bool is_type(token_type t) {
	return has_bit(
		static_cast<std::uintmax_t>(token_type::type),
		static_cast<std::uintmax_t>(t)
	);
}

class token {
private:
	std::string text;
	token_type type;
public:
	token(std::string_view text, token_type type);
	token(const token &other);
	token(token &&other) noexcept;

	operator std::string_view() const;
	operator token_type() const;
	token &operator=(const token &other);
};

#endif


